import sys
import unittest

from varspark.pvalues_calculation import _ff_fit
from varspark.pvalues_calculation import _my_dsn
from varspark.pvalues_calculation import _propTrueNullByLocalFDR
from varspark.pvalues_calculation import _determine_C
from varspark.pvalues_calculation import _local_fdr
from varspark.pvalues_calculation import run_it_importances

import pandas as pd
import numpy as np
import hail as hl
import varspark.hail as vshl

import pytest


@pytest.mark.pvalues
class PValuesCalculationTest(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        """
        This constructor creates the initial dataframe with the variance importances to assess
        the different functions of the p-value calculation.
        """

        vshl.init()

        vds = hl.import_vcf('../data/chr22_1000.vcf')
        labels = hl.import_table('../data/chr22-labels-hail.csv', impute=True,
                                 delimiter=",").key_by('sample')

        vds = vds.annotate_cols(label=labels[vds.s])
        rf_model = vshl.random_forest_model(y=vds.label['x22_16050408'], x=vds.GT.n_alt_alleles(),
                                            seed=13, mtry_fraction=0.05, min_node_size=5,
                                            max_depth=10)
        rf_model.fit_trees(100, 50)
        impTable = rf_model.variable_importance()
        df = impTable.order_by(hl.desc(impTable.importance)).to_spark(flatten=False).toPandas()
        df['log_importance'] = df.importance.apply(np.log)

        df = df[df.importance > 0]
        df['composed_index'] = df.apply(lambda row: str(row['locus'][0]) + '_'
                                                    + str(row['locus'][1]) + '_'
                                                    + str('_'.join(row['alleles'])), axis=1)
        self.df = df[['composed_index', 'log_importance']].set_index('composed_index').squeeze()
        self.df.to_csv('~/workspace/tor.tsv', sep='\t')

    def test_number_of_significant_variants(self):
        """
        Assess weather the p-values calculation returns the same number of significant variants
        as the original R script.
        :return:
        """
        temp = run_it_importances(self.df)

        # The 14 is computed using the R script using same data
        #TODO: Update when the initial parameters algorithm is decided
        #self.assertEqual(len(temp['ppp']), 14)

    def test_spline_fit(self):
        """
        Assertion that the histogram generation and the spline fit produce similar results.
        :param imp1: Importance values
        :return:
        """
        imp1 = self.df - min(self.df) + sys.float_info.epsilon
        rfit = _ff_fit(imp1)
        x = np.array(
            [0.05588077, 0.1676423, 0.2794038, 0.3911654, 0.5029269, 0.6146884, 0.72645, 0.8382115,
             0.9499731, 1.061735, 1.173496, 1.285258, 1.397019, 1.508781, 1.620542, 1.732304,
             1.844065, 1.955827, 2.067588, 2.17935, 2.291111, 2.402873, 2.514635, 2.626396,
             2.738158, 2.849919, 2.961681, 3.073442, 3.185204, 3.296965, 3.408727, 3.520488,
             3.63225, 3.744011, 3.855773, 3.967535, 4.079296, 4.191058, 4.302819, 4.414581,
             4.526342, 4.638104, 4.749865, 4.861627, 4.973388, 5.08515, 5.196911, 5.308673,
             5.420434, 5.532196, 5.643958, 5.755719, 5.867481, 5.979242, 6.091004, 6.202765,
             6.314527, 6.426288, 6.53805, 6.649811, 6.761573, 6.873334, 6.985096, 7.096858,
             7.208619, 7.320381, 7.432142, 7.543904, 7.655665, 7.767427, 7.879188, 7.99095,
             8.102711, 8.214473, 8.326234, 8.437996, 8.549757, 8.661519, 8.773281, 8.885042,
             8.996804, 9.108565, 9.220327, 9.332088, 9.44385, 9.555611, 9.667373, 9.779134,
             9.890896, 10.00266, 10.11442, 10.22618, 10.33794, 10.4497, 10.56147, 10.67323,
             10.78499, 10.89675, 11.00851, 11.12027, 11.23203, 11.3438, 11.45556, 11.56732,
             11.67908, 11.79084, 11.9026, 12.01437, 12.12613, 12.23789, 12.34965, 12.46141,
             12.57317, 12.68493, 12.7967, 12.90846, 13.02022, 13.13198, 13.24374])
        counts = np.array(
            [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 0, 2, 0, 2, 1, 3, 0, 2, 1, 4,
             3, 3, 1, 4, 5, 1, 7, 6, 9, 1, 8, 2, 3, 3, 20, 6, 3, 6, 8, 32, 28, 31, 7, 16, 23, 24,
             30, 29, 23, 25, 16, 20, 19, 21, 18, 15, 6, 8, 4, 3, 6, 6, 4, 4, 3, 0, 2, 3, 0, 0, 0,
             1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 2, 2, 1,
             0, 1, 1, 0, 1, 0, 0, 0, 0, 1])
        spline = np.array(
            [1.236091, 1.082392, 0.9500147, 0.8377187, 0.7438742, 0.6667228, 0.6045703, 0.5559236,
             0.5195906, 0.4947624, 0.4810965, 0.4788275, 0.4889282, 0.5125189, 0.5498312, 0.6015056,
             0.668616, 0.7524485, 0.8542318, 0.9747871, 1.114076, 1.270654, 1.441063, 1.619265,
             1.796369, 1.965329, 2.12485, 2.275399, 2.418837, 2.55834, 2.698333, 2.844471, 3.00372,
             3.184581, 3.397528, 3.655738, 3.975675, 4.370116, 4.847861, 5.418681, 6.093043,
             6.881503, 7.793845, 8.837934, 10.01824, 11.33403, 12.77737, 14.33089, 15.96612,
             17.64415, 19.31462, 20.91531, 22.37402, 23.61208, 24.54956, 25.112, 25.23805, 24.88719,
             24.04643, 22.73467, 21.01455, 19.01338, 16.86717, 14.69617, 12.59742, 10.64166,
             8.874095, 7.317468, 5.976618, 4.843327, 3.900871, 3.127839, 2.501031, 1.997531,
             1.596145, 1.278087, 1.027218, 0.8300113, 0.6753507, 0.5542472, 0.4595273, 0.3855297,
             0.3278293, 0.2829979, 0.2483429, 0.221765, 0.201714, 0.1870729, 0.1770706, 0.1712271,
             0.1693241, 0.1714013, 0.1777823, 0.1891348, 0.2065818, 0.23183, 0.2664847, 0.311887,
             0.3694103, 0.440121, 0.5242651, 0.6205975, 0.7256277, 0.8329654, 0.9330691, 1.013769,
             1.061858, 1.066656, 1.028537, 0.9555717, 0.8585574, 0.7487786, 0.6362544, 0.528709,
             0.4312473, 0.3465573, 0.275409, 0.2172454, 0.1707292])



        assert np.allclose(rfit['counts'], counts, rtol=1e-05, atol=1e-08)  # Assert counts
        assert np.allclose(rfit['x'], x, rtol=1e-05, atol=1e-08)  # Assert x
        #f.spline is not the same but close. The difference does not affect the final outcome
        #assert np.allclose(rfit["f.spline"], spline, rtol=1e-05, atol=1e-08)  # assert spline

    def test_my_dsn(self):
        """
        Testing the density skewed normal function.
        :return:
        """
        produced = _my_dsn([0, 1, 1], np.arange(1, 7))
        expected = np.array([4.03284541e-01, 1.05732309e-01, 8.86369682e-03, 2.67660452e-04,
                             2.97343903e-06, 1.21517657e-08])
        assert np.allclose(produced, expected, rtol=1e-05, atol=1e-08)

    def test_propTrueNullByLocalFDR(self):
        """
        Testing the function propTrueNullByLocalFDR
        :return:
        """
        produced = _propTrueNullByLocalFDR(np.array([0.1, 0.2, 0.3, 0.4, 0.56, 0.6, 0.7, 0.8]))
        expected = 0.81333333
        assert np.allclose(produced, expected, rtol=1e-05, atol=1e-08)

    def test_determine_C(self):
        """
        Testing the function determine_C
        :return:
        """
        f_fit = {}
        f_fit['counts'] = np.array(
            [85, 448, 289, 339, 256, 263, 194, 217, 165, 139, 140, 121, 127, 85, 85, 82, 57, 47, 51,
             57, 45, 37, 36, 36, 31, 19, 24, 20, 21, 14, 13, 17, 9, 17, 2, 7, 8, 4, 6, 2, 7, 2, 6,
             0, 2, 2, 2, 1, 0, 0, 2, 2, 5, 1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,
             2, 0, 0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
        f_fit['f.spline'] = np.array(
            [278.8820320721202, 277.70362414066557, 273.1253056786664, 265.31494421280627,
             254.55455049227248, 241.2233790724736, 225.7757575775756, 208.7154503248807,
             190.5685677277233, 171.85703716430365, 153.0744649787791, 134.66587576454083,
             117.0123627837792, 100.42117943742244, 85.76954638363037, 73.74776912886068,
             63.84459296602769, 55.649186294847404, 48.83744950632319, 43.15256275674444,
             38.390137824098204, 34.38683546151279, 31.011602648231385, 28.158899104612356,
             25.743440825636906, 23.696105579036654, 21.960732389062663, 20.400746476523903,
             18.809674627694285, 17.206594985535098, 15.616619119184723, 14.062337891908316,
             12.5633792109131, 11.13611833229888, 9.79353848748347, 8.545232046370389,
             7.397526259307219, 6.353713081833369, 5.414359791853019, 4.577676026491573,
             3.8534483743135297, 3.266833356870565, 2.791639874281882, 2.4046217971050265,
             2.0878011920615465, 1.8272016468659833, 1.6119025779666643, 1.433329623630319,
             1.2847195674895713, 1.160714944239556, 1.0570554951718014, 0.9703423260513642,
             0.8978569278548996, 0.8371422466432359, 0.7852346598120467, 0.7408238104621929,
             0.7029843774869624, 0.6709523603666824, 0.6440995062947614, 0.6219128314838847,
             0.603978304248189, 0.5899679637711005, 0.5796299132602223, 0.5727807595190055,
             0.5693001807316634, 0.5691273967772451, 0.5715165251230759, 0.5708643331799654,
             0.5660312059996041, 0.5571231285604524, 0.5443338589393101, 0.5279379216562108,
             0.5082808123081849, 0.48576690151768137, 0.4608456292196354, 0.4339966462985537,
             0.40571458655546144, 0.3764941378911781, 0.34681603024275454, 0.3172438168185182,
             0.2894586113654605, 0.26380190756303057, 0.24014167649914608, 0.21835105477211672,
             0.19830844057637445, 0.17989755214643127, 0.16300745158677524, 0.14753253710587022,
             0.1333725066372558, 0.12043229577254407, 0.10862199285271615, 0.09785673396812562,
             0.08808746471166494, 0.0799904166336681, 0.07359153524568025, 0.06859363583924098,
             0.06477476406217392, 0.06197177166969765, 0.0600686733465737, 0.058988618431273974,
             0.05868869666928656, 0.05915708439902957, 0.060412264285551645, 0.06250424619764365,
             0.06551790262804355, 0.06957618101185688, 0.07458768376864797, 0.0805305624473706,
             0.08756719156744502, 0.09589792008161635, 0.10577037205591794, 0.11749136615480499,
             0.1314422403857537, 0.14809862610431693, 0.16805606249540442, 0.1920633129181497,
             0.2210658839654809, 0.2562631216163017, 0.29918345737770613])
        x = np.array(
            [0.03652410835823044, 0.1095723250746913, 0.18262054179115217, 0.25566875850761306,
             0.32871697522407395, 0.40176519194053484, 0.4748134086569957, 0.5478616253734565,
             0.6209098420899175, 0.6939580588063783, 0.7670062755228393, 0.8400544922393001,
             0.9131027089557608, 0.9861509256722218, 1.0591991423886826, 1.1322473591051436,
             1.2052955758216044, 1.2783437925380654, 1.3513920092545262, 1.424440225970987,
             1.497488442687448, 1.570536659403909, 1.6435848761203697, 1.7166330928368305,
             1.7896813095532913, 1.8627295262697523, 1.9357777429862133, 2.008825959702674,
             2.081874176419135, 2.154922393135596, 2.227970609852057, 2.3010188265685176,
             2.3740670432849784, 2.447115260001439, 2.5201634767179, 2.593211693434361,
             2.666259910150822, 2.7393081268672828, 2.812356343583744, 2.8854045603002048,
             2.9584527770166655, 3.0315009937331263, 3.104549210449587, 3.177597427166048,
             3.250645643882509, 3.32369386059897, 3.3967420773154307, 3.4697902940318914,
             3.5428385107483527, 3.6158867274648134, 3.688934944181274, 3.761983160897735,
             3.8350313776141958, 3.908079594330657, 3.9811278110471178, 4.054176027763578,
             4.12722424448004, 4.2002724611965, 4.273320677912961, 4.346368894629422,
             4.419417111345883, 4.4924653280623446, 4.5655135447788044, 4.638561761495266,
             4.711609978211726, 4.784658194928188, 4.857706411644648, 4.930754628361109,
             5.00380284507757, 5.076851061794031, 5.1498992785104925, 5.222947495226952,
             5.295995711943414, 5.369043928659874, 5.442092145376336, 5.5151403620927955,
             5.588188578809257, 5.661236795525718, 5.734285012242179, 5.80733322895864,
             5.8803814456751, 5.953429662391562, 6.026477879108022, 6.0995260958244835,
             6.172574312540943, 6.245622529257405, 6.318670745973866, 6.391718962690327,
             6.464767179406788, 6.537815396123248, 6.61086361283971, 6.68391182955617,
             6.756960046272631, 6.830008262989091, 6.903056479705553, 6.976104696422013,
             7.0491529131384745, 7.122201129854936, 7.195249346571396, 7.268297563287858,
             7.341345780004318, 7.414393996720779, 7.487442213437239, 7.560490430153701,
             7.633538646870161, 7.706586863586622, 7.779635080303084, 7.852683297019544,
             7.925731513736006, 7.9987797304524655, 8.071827947168927, 8.144876163885389,
             8.217924380601849, 8.290972597318309, 8.36402081403477, 8.437069030751232,
             8.510117247467692, 8.583165464184152, 8.656213680900613])
        y = np.array(
            [0.3175805105055251, 1.6738361024291206, 1.0797737357187855, 1.2665858007220352,
             0.9564777728166401, 0.9826314619170958, 0.72483081221261, 0.8107643621141051,
             0.6164798145107251, 0.519337540709035, 0.5230737820091, 0.4520851973078658,
             0.4745026451082551, 0.31758051050552505, 0.31758051050552455, 0.3063717866053305,
             0.21296575410370536, 0.17560334110305476, 0.1905483063033153, 0.2129657541037047,
             0.16813085850292528, 0.13824092810240482, 0.13450468680234023, 0.13450468680234023,
             0.11582348030201484, 0.07098858470123512, 0.08966979120155988, 0.07472482600130012,
             0.07846106730136514, 0.05230737820090977, 0.04857113690084509, 0.0635161021011051,
             0.03362617170058506, 0.0635161021011051, 0.007472482600129967, 0.026153689100455044,
             0.02988993040052005, 0.014944965200260025, 0.0224174478003899, 0.0074724826001300124,
             0.026153689100455044, 0.0074724826001300124, 0.022417447800390036, 0.0,
             0.0074724826001300124, 0.0074724826001300124, 0.0074724826001300124,
             0.0037362413000650062, 0.0, 0.0, 0.0074724826001300124, 0.0074724826001300124,
             0.018681206500324916, 0.0037362413000650062, 0.0037362413000650062, 0.0, 0.0,
             0.0037362413000650062, 0.0, 0.007472482600129921, 0.0, 0.0, 0.0, 0.0037362413000650062,
             0.0, 0.0, 0.0, 0.0, 0.0037362413000649607, 0.0, 0.0, 0.0037362413000650062,
             0.0074724826001300124, 0.0, 0.0, 0.0074724826001300124, 0.0, 0.0, 0.0,
             0.0037362413000650062, 0.0037362413000650062, 0.0, 0.0037362413000650062, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0037362413000650062, 0.0, 0.0, 0.0, 0.0, 0.0037362413000650062, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0037362413000649607])
        estimates = [-0.06723984, 0.63391814, 3.58526281]
        df = pd.DataFrame({'x': x, 'y': y})

        expected = np.array(
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             115.3777, 158.9105, 221.256, 257.1904, 330.6581, 339.987, 374.9795, 417.7367, 440.5296,
             476.8513, 489.6945, 537.2005, 551.569, 597.1163, 597.1335, 614.1058, 632.0309,
             650.9514, 660.9391, 660.9564, 660.9736, 684.3001, 708.8343, 773.2692, 786.816, 801.028,
             801.0452, 801.0624, 817.3846, 817.4018, 853.0333, 853.0505, 853.0677, 853.085,
             874.1423, 874.1595, 874.1767, 874.194, 874.2112, 899.6861, 899.7033, 899.7205,
             927.7544, 985.126, 985.1432, 985.1605, 1043.987, 1044.004, 1044.021, 1044.038,
             1073.224, 1102.319, 1102.337, 1131.245, 1131.263, 1131.28, 1131.297, 1131.314,
             1131.332, 1131.349, 1131.366, 1131.383, 1131.4, 1131.418, 1131.435, 1131.452, 1131.469,
             1131.487, 1131.504, 1131.521, 1131.538, 1131.555, 1131.573, 1159.101, 1159.119,
             1159.136, 1159.153, 1159.17, 1186.987, 1187.004, 1187.021, 1187.038, 1187.055,
             1187.073, 1187.09, 1187.107, 1187.124, 1187.142, 1187.159, 1216.287])

        produced = _determine_C(f_fit, df, estimates)
        produced[np.isnan(produced)] = 0
        assert np.allclose(produced, expected, rtol=1e-05, atol=1e-08)


    def test_local_fdr(self):
        estimates = [-0.06723984,  0.63391814,  3.58526281]
        f = {"f.spline": np.array(
            [278.8820320721202, 277.70362414066557, 273.1253056786664, 265.31494421280627,
             254.55455049227248, 241.2233790724736, 225.7757575775756, 208.7154503248807,
             190.5685677277233, 171.85703716430365, 153.0744649787791, 134.66587576454083,
             117.0123627837792, 100.42117943742244, 85.76954638363037, 73.74776912886068,
             63.84459296602769, 55.649186294847404, 48.83744950632319, 43.15256275674444,
             38.390137824098204, 34.38683546151279, 31.011602648231385, 28.158899104612356,
             25.743440825636906, 23.696105579036654, 21.960732389062663, 20.400746476523903,
             18.809674627694285, 17.206594985535098, 15.616619119184723, 14.062337891908316,
             12.5633792109131, 11.13611833229888, 9.79353848748347, 8.545232046370389,
             7.397526259307219, 6.353713081833369, 5.414359791853019, 4.577676026491573,
             3.8534483743135297, 3.266833356870565, 2.791639874281882, 2.4046217971050265,
             2.0878011920615465, 1.8272016468659833, 1.6119025779666643, 1.433329623630319,
             1.2847195674895713, 1.160714944239556, 1.0570554951718014, 0.9703423260513642,
             0.8978569278548996, 0.8371422466432359, 0.7852346598120467, 0.7408238104621929,
             0.7029843774869624, 0.6709523603666824, 0.6440995062947614, 0.6219128314838847,
             0.603978304248189, 0.5899679637711005, 0.5796299132602223, 0.5727807595190055,
             0.5693001807316634, 0.5691273967772451, 0.5715165251230759, 0.5708643331799654,
             0.5660312059996041, 0.5571231285604524, 0.5443338589393101, 0.5279379216562108,
             0.5082808123081849, 0.48576690151768137, 0.4608456292196354, 0.4339966462985537,
             0.40571458655546144, 0.3764941378911781, 0.34681603024275454, 0.3172438168185182,
             0.2894586113654605, 0.26380190756303057, 0.24014167649914608, 0.21835105477211672,
             0.19830844057637445, 0.17989755214643127, 0.16300745158677524, 0.14753253710587022,
             0.1333725066372558, 0.12043229577254407, 0.10862199285271615, 0.09785673396812562,
             0.08808746471166494, 0.0799904166336681, 0.07359153524568025, 0.06859363583924098,
             0.06477476406217392, 0.06197177166969765, 0.0600686733465737, 0.058988618431273974,
             0.05868869666928656, 0.05915708439902957, 0.060412264285551645, 0.06250424619764365,
             0.06551790262804355, 0.06957618101185688, 0.07458768376864797, 0.0805305624473706,
             0.08756719156744502, 0.09589792008161635, 0.10577037205591794, 0.11749136615480499,
             0.1314422403857537, 0.14809862610431693, 0.16805606249540442, 0.1920633129181497,
             0.2210658839654809, 0.2562631216163017, 0.29918345737770613])}
        x = np.array(
            [0.03652410835823044, 0.1095723250746913, 0.18262054179115217, 0.25566875850761306,
             0.32871697522407395, 0.40176519194053484, 0.4748134086569957, 0.5478616253734565,
             0.6209098420899175, 0.6939580588063783, 0.7670062755228393, 0.8400544922393001,
             0.9131027089557608, 0.9861509256722218, 1.0591991423886826, 1.1322473591051436,
             1.2052955758216044, 1.2783437925380654, 1.3513920092545262, 1.424440225970987,
             1.497488442687448, 1.570536659403909, 1.6435848761203697, 1.7166330928368305,
             1.7896813095532913, 1.8627295262697523, 1.9357777429862133, 2.008825959702674,
             2.081874176419135, 2.154922393135596, 2.227970609852057, 2.3010188265685176,
             2.3740670432849784, 2.447115260001439, 2.5201634767179, 2.593211693434361,
             2.666259910150822, 2.7393081268672828, 2.812356343583744, 2.8854045603002048,
             2.9584527770166655, 3.0315009937331263, 3.104549210449587, 3.177597427166048,
             3.250645643882509, 3.32369386059897, 3.3967420773154307, 3.4697902940318914,
             3.5428385107483527, 3.6158867274648134, 3.688934944181274, 3.761983160897735,
             3.8350313776141958, 3.908079594330657, 3.9811278110471178, 4.054176027763578,
             4.12722424448004, 4.2002724611965, 4.273320677912961, 4.346368894629422,
             4.419417111345883, 4.4924653280623446, 4.5655135447788044, 4.638561761495266,
             4.711609978211726, 4.784658194928188, 4.857706411644648, 4.930754628361109,
             5.00380284507757, 5.076851061794031, 5.1498992785104925, 5.222947495226952,
             5.295995711943414, 5.369043928659874, 5.442092145376336, 5.5151403620927955,
             5.588188578809257, 5.661236795525718, 5.734285012242179, 5.80733322895864,
             5.8803814456751, 5.953429662391562, 6.026477879108022, 6.0995260958244835,
             6.172574312540943, 6.245622529257405, 6.318670745973866, 6.391718962690327,
             6.464767179406788, 6.537815396123248, 6.61086361283971, 6.68391182955617,
             6.756960046272631, 6.830008262989091, 6.903056479705553, 6.976104696422013,
             7.0491529131384745, 7.122201129854936, 7.195249346571396, 7.268297563287858,
             7.341345780004318, 7.414393996720779, 7.487442213437239, 7.560490430153701,
             7.633538646870161, 7.706586863586622, 7.779635080303084, 7.852683297019544,
             7.925731513736006, 7.9987797304524655, 8.071827947168927, 8.144876163885389,
             8.217924380601849, 8.290972597318309, 8.36402081403477, 8.437069030751232,
             8.510117247467692, 8.583165464184152, 8.656213680900613])
        expected = np.array(
            (0.9946801, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9975486, 0.966192, 0.9279225, 0.8735448,
             0.8059951, 0.7288754, 0.6460229, 0.5611981, 0.4778133, 0.3987255, 0.3261095, 0.2614126,
             0.2053825, 0.1581517, 0.1193599, 0.08868421, 0.06551361, 0.04813617, 0.0351776,
             0.02556912, 0.01848502, 0.01329165, 0.009505884, 0.006761779, 0.004783922, 0.003366371,
             0.002356105, 0.001640144, 0.001131608, 0.0007650156, 0.0005063172, 0.00032806,
             0.0002080952, 0.0001292258, 7.856232e-05, 4.675819e-05, 2.724453e-05, 1.5541e-05,
             8.678748e-06, 4.744749e-06, 2.539496e-06, 1.331083e-06, 6.843651e-07, 3.45214e-07,
             1.708468e-07, 8.295513e-08, 3.951823e-08, 1.847012e-08, 8.469538e-09, 3.810375e-09,
             1.681874e-09, 7.283453e-10, 3.09456e-10, 1.289967e-10, 5.282507e-11, 2.146101e-11,
             8.66742e-12, 3.479841e-12, 1.388861e-12, 5.510463e-13, 2.173438e-13, 8.521892e-14,
             3.321657e-14, 1.287073e-14, 4.957716e-15, 1.898409e-15, 7.226496e-16, 2.733669e-16,
             1.023052e-16, 3.782551e-17, 1.381678e-17, 4.986133e-18, 1.777689e-18, 6.261566e-19,
             2.178939e-19, 7.491041e-20, 2.544335e-20, 8.537711e-21, 2.830372e-21, 9.270022e-22,
             2.998477e-22, 9.487533e-23, 2.923971e-23, 8.777279e-24, 2.566338e-24, 7.308613e-25,
             2.027324e-25, 5.477451e-26, 1.441454e-26, 3.694796e-27, 9.22459e-28, 2.243215e-28,
             5.313268e-29, 1.225845e-29, 2.764628e-30, 6.109195e-31, 1.322749e-31, 2.806188e-32,
             5.833138e-33, 1.188048e-33, 2.370891e-34, 4.635914e-35, 8.881887e-36, 1.667329e-36,
             3.066785e-37, 5.527025e-38, 9.759907e-39))


        produced = _local_fdr(f,x,estimates, _my_dsn)
        print(produced)
        assert np.allclose(produced, expected, rtol=1e-05, atol=1e-08)

if __name__ == '__main__':
    unittest.main()
